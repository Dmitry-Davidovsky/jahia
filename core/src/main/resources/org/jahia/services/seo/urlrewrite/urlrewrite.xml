<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN"
        "http://tuckey.org/res/dtds/urlrewrite3.2.dtd">

<urlrewrite>

    <!-- Block direct access -->
    <rule enabled="true">
        <name>Block direct access</name>
        <note>Restricts direct access to the resources</note>
        <condition type="attribute" name="javax.servlet.forward.request_uri" operator="equal">^$</condition>
        <condition type="attribute" name="jahiaResourceAccessGranted" operator="equal">^$</condition>
        <from>^/(LICENSE|modules/.*/META-INF/.*|modules/.*/WEB-INF/.*|modules/.*/mails/.*|modules/.*\.cnd|modules/.*\.drl|modules/.*\.dsl|modules/.*\.properties)$</from>
        <set type="status">404</set>
        <set type="request" name="UrlRewriteFilter.sendError">404</set>
        <to>null</to>
    </rule>
    <!-- end of block direct access -->

    <rule enabled="true">
        <name>OSGi Web console access</name>
        <note>Allow access via /tools/osgi/* path only to the OSGi Web console</note>
        <condition type="attribute" name="javax.servlet.forward.request_uri" operator="equal">^$</condition>
        <condition type="request-uri" operator="notequal">^(/[\p{Alnum}\-_]*)?/tools/osgi/console(/.*)?</condition>
        <from>^/tools/osgi/.*$</from>
        <set type="status">404</set>
        <set type="request" name="UrlRewriteFilter.sendError">404</set>
        <to>null</to>
    </rule>

    <!-- GWT resources-->
    <rule>
        <note>GWT CSS</note>
        <from>^/gwt/(manager|edit)/(.*)\.css$</from>
        <to>/gwt/resources/$1.css</to>
    </rule>
    <rule>
        <note>GWT images</note>
        <from>^/gwt/(manager|edit)/images/(.*)$</from>
        <to>/gwt/resources/images/$2</to>
    </rule>
    <rule>
        <note>GWT CSS images</note>
        <from>^/gwt/resources/css/images/(.*)$</from>
        <to>/gwt/resources/images/$1</to>
    </rule>
    <!-- end of GWT resources-->

    <!-- Jahia GWT and Anthracite Theme resources -->
    <rule>
        <name>Jahia Anthracite Theme resources - CSS/JavaScript (inbound)</name>
        <note>Handles checksum for the edit.js file of the Jahia Anthracite Theme for the proper cache support</note>
        <from>^/engines/jahia-anthracite/(.*)\.v[0-9a-f]+\.(js|css)$</from>
        <to last="true">/engines/jahia-anthracite/$1.$2</to>
    </rule>
    <rule>
        <name>Jahia GWT resources - CSS/JavaScript (inbound)</name>
        <note>Handles checksum for the GWT CSS/JS resources for the proper cache support</note>
        <from>^/gwt/resources/(.*)\.v[0-9a-f]+\.(js|css)$</from>
        <to last="true">/gwt/resources/$1.$2</to>
    </rule>
    <outbound-rule>
        <name>Jahia Anthracite Theme resources - CSS/JavaScript (outbound)</name>
        <note>Handles checksum for the edit.js file of the Jahia Anthracite Theme for the proper cache support</note>
        <from>^(/[\p{Alnum}\-_]*)?(/engines/jahia-anthracite/(.*).(js|css))$</from>
        <run class="org.jahia.services.seo.urlrewrite.ResourceChecksumCalculator" method="calculateChecksum(HttpServletRequest, String, String)"/>
        <to last="true" encode="false">$1/engines/jahia-anthracite/$3.v%{attribute:ResourceChecksumCalculator.checksum}.$4</to>
    </outbound-rule>
    <outbound-rule>
        <name>Jahia GWT resources - CSS/JavaScript (outbound)</name>
        <note>Handles checksum for the GWT CSS/JS resources for the proper cache support</note>
        <from>^(/[\p{Alnum}\-_]*)?(/gwt/resources/(.*).(js|css))$</from>
        <run class="org.jahia.services.seo.urlrewrite.ResourceChecksumCalculator" method="calculateChecksum(HttpServletRequest, String, String)"/>
        <to last="true" encode="false">$1/gwt/resources/$3.v%{attribute:ResourceChecksumCalculator.checksum}.$4</to>
    </outbound-rule>
    <!-- end of Jahia GWT and Anthracite Theme resources -->

    <outbound-rule>
        <name>reset outbound parameters</name>
        <note>reset outbound parameters</note>
        <from>^(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="resetStateForOutboundUrl(HttpServletRequest)"/>
    </outbound-rule>

    <outbound-rule>
        <name>lang placehodler</name>
        <note>Replace {lang} placeholder</note>
        <from>^([^?]*)\{lang\}(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="getLinkLocale(HttpServletRequest, String, String)"/>
        <to>$1%{attribute:currentLinkLocale}$2</to>
    </outbound-rule>

    <outbound-rule>
        <name>workspace placeholder</name>
        <note>Replace {workspace} placeholder</note>
        <from>^([^?]*)\{workspace\}(.*)$</from>
        <to>$1%{attribute:currentWorkspace}$2</to>
    </outbound-rule>

    <outbound-rule>
        <name>mode placeholder</name>
        <note>Replace {mode} placeholder</note>
        <from>^([^?]*)\{mode\}(.*)$</from>
        <to>$1%{attribute:currentMode}$2</to>
    </outbound-rule>

    <outbound-rule>
        <name>Perform outbound URL analysis</name>
        <note>
            Main analysis of the outbound URL (link in the generated HTML response) is done here.

            Checks if the target site key in the processed URL is mapped to the current server name. If yes, it sets the request variable jahiaSiteKeyMatchesCurrentServerName to true.

            If the language in the URL matches the default language of the target site, sets jahiaSiteKeyMatchesDefaultLanguage to true. In such case the jahiaSeoLanguageToken is set
            to an empty string. Otherwise the jahiaSeoLanguageToken is set to e.g. "/en" for English.

            If the /cms prefix should be removed (if the removal is not disabled by setting urlRewriteRemoveCmsPrefix to false in jahia.properties) and the following
            path is not starting with the reserved keyword, the jahiaSeoCmsToken attribute will be set to an empty string. Otherwise it will be set to /cms to preserve the prefix.
        </note>
        <from>^(/[\p{Alnum}\-_]*)?/cms/render/live/([a-zA-Z_]{2,6})/sites/([\p{Alnum}\-_]+)/(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="analyzeLink(HttpServletRequest, String, String, String, String)"/>
    </outbound-rule>

    <outbound-rule>
        <name>Perform outbound URL analysis on files link</name>
        <note>
            Main analysis of the outbound URL (link in the generated HTML response) is done here.

            Checks if the target site key in the processed URL is mapped to the current server name. If yes, it sets the request variable jahiaSiteKeyMatchesCurrentServerName to true.
        </note>
        <from>^(/[\p{Alnum}\-_]*)?/files/live/sites/([\p{Alnum}\-_]+)/(.*)$</from>
        <run class="org.jahia.services.seo.urlrewrite.ServerNameToSiteMapper" method="analyzeLink(HttpServletRequest, String, String, String)"/>
    </outbound-rule>

    <outbound-rule>
        <name>Vanity url</name>
        <note>Check for vanity urls</note>
        <from>^(.*)/cms/render(.*)$</from>
        <run class="org.jahia.services.seo.jcr.VanityUrlMapper" method="checkVanityUrl(HttpServletRequest, String, String)"/>
        <to>%{attribute:org.jahia.services.seo.jcr.VanityUrl}</to>
    </outbound-rule>

    <outbound-rule>
        <name>Vanity url file</name>
        <note>Check for vanity urls</note>
        <from>^/files/live(.*)$</from>
        <run class="org.jahia.services.seo.jcr.VanityUrlMapper" method="checkFileVanityUrl(HttpServletRequest, String)"/>
        <to>%{attribute:org.jahia.services.seo.jcr.VanityUrl}</to>
    </outbound-rule>

    <!-- Jahia Administration -->
    <rule enabled="true">
        <name>Jahia Administration</name>
        <note>Redirects to new Jahia Server Administration page</note>
        <from>^/administration(/)?$</from>
        <to type="redirect">%{context-path}/welcome/adminmode</to>
    </rule>

</urlrewrite>